/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesVisualsearch = {}), global.msRest));
}(this, function (exports, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var ResponseBase = {
        serializedName: "ResponseBase",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "_type",
                clientName: "_type"
            },
            uberParent: "ResponseBase",
            className: "ResponseBase",
            modelProperties: {
                _type: {
                    required: true,
                    serializedName: "_type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Identifiable = {
        serializedName: "Identifiable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Identifiable",
            modelProperties: __assign(__assign({}, ResponseBase.type.modelProperties), { id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Response = {
        serializedName: "Response",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Response",
            modelProperties: __assign(__assign({}, Identifiable.type.modelProperties), { readLink: {
                    readOnly: true,
                    serializedName: "readLink",
                    type: {
                        name: "String"
                    }
                }, webSearchUrl: {
                    readOnly: true,
                    serializedName: "webSearchUrl",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Thing = {
        serializedName: "Thing",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Thing",
            modelProperties: __assign(__assign({}, Response.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, url: {
                    readOnly: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }, image: {
                    readOnly: true,
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }, alternateName: {
                    readOnly: true,
                    serializedName: "alternateName",
                    type: {
                        name: "String"
                    }
                }, bingId: {
                    readOnly: true,
                    serializedName: "bingId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Intangible = {
        serializedName: "Intangible",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Intangible",
            modelProperties: __assign({}, Thing.type.modelProperties)
        }
    };
    var StructuredValue = {
        serializedName: "StructuredValue",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "StructuredValue",
            modelProperties: __assign({}, Intangible.type.modelProperties)
        }
    };
    var Point2D = {
        serializedName: "Point2D",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Point2D",
            modelProperties: __assign(__assign({}, StructuredValue.type.modelProperties), { x: {
                    required: true,
                    serializedName: "x",
                    type: {
                        name: "Number"
                    }
                }, y: {
                    required: true,
                    serializedName: "y",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var NormalizedQuadrilateral = {
        serializedName: "NormalizedQuadrilateral",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "NormalizedQuadrilateral",
            modelProperties: __assign(__assign({}, StructuredValue.type.modelProperties), { topLeft: {
                    required: true,
                    serializedName: "topLeft",
                    type: {
                        name: "Composite",
                        className: "Point2D"
                    }
                }, topRight: {
                    required: true,
                    serializedName: "topRight",
                    type: {
                        name: "Composite",
                        className: "Point2D"
                    }
                }, bottomRight: {
                    required: true,
                    serializedName: "bottomRight",
                    type: {
                        name: "Composite",
                        className: "Point2D"
                    }
                }, bottomLeft: {
                    required: true,
                    serializedName: "bottomLeft",
                    type: {
                        name: "Composite",
                        className: "Point2D"
                    }
                } })
        }
    };
    var ImageTagRegion = {
        serializedName: "ImageTagRegion",
        type: {
            name: "Composite",
            className: "ImageTagRegion",
            modelProperties: {
                queryRectangle: {
                    required: true,
                    serializedName: "queryRectangle",
                    type: {
                        name: "Composite",
                        className: "NormalizedQuadrilateral"
                    }
                },
                displayRectangle: {
                    required: true,
                    serializedName: "displayRectangle",
                    type: {
                        name: "Composite",
                        className: "NormalizedQuadrilateral"
                    }
                }
            }
        }
    };
    var CreativeWork = {
        serializedName: "CreativeWork",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "CreativeWork",
            modelProperties: __assign(__assign({}, Thing.type.modelProperties), { thumbnailUrl: {
                    readOnly: true,
                    serializedName: "thumbnailUrl",
                    type: {
                        name: "String"
                    }
                }, provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Thing"
                            }
                        }
                    }
                }, datePublished: {
                    readOnly: true,
                    serializedName: "datePublished",
                    type: {
                        name: "String"
                    }
                }, text: {
                    readOnly: true,
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Action = {
        serializedName: "Action",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Action",
            modelProperties: __assign(__assign({}, CreativeWork.type.modelProperties), { result: {
                    readOnly: true,
                    serializedName: "result",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Thing"
                            }
                        }
                    }
                }, displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }, isTopAction: {
                    readOnly: true,
                    serializedName: "isTopAction",
                    type: {
                        name: "Boolean"
                    }
                }, serviceUrl: {
                    readOnly: true,
                    serializedName: "serviceUrl",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ImageAction = {
        serializedName: "ImageAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ImageAction",
            modelProperties: __assign(__assign({}, Action.type.modelProperties), { actionType: {
                    readOnly: true,
                    serializedName: "actionType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ImageTag = {
        serializedName: "ImageTag",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ImageTag",
            modelProperties: __assign(__assign({}, Thing.type.modelProperties), { displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }, boundingBox: {
                    readOnly: true,
                    serializedName: "boundingBox",
                    type: {
                        name: "Composite",
                        className: "ImageTagRegion"
                    }
                }, actions: {
                    readOnly: true,
                    serializedName: "actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageAction"
                            }
                        }
                    }
                } })
        }
    };
    var Organization = {
        serializedName: "Organization",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Organization",
            modelProperties: __assign({}, Thing.type.modelProperties)
        }
    };
    var PropertiesItem = {
        serializedName: "Properties/Item",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "_type",
                clientName: "_type"
            },
            uberParent: "PropertiesItem",
            className: "PropertiesItem",
            modelProperties: {
                text: {
                    readOnly: true,
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                _type: {
                    required: true,
                    serializedName: "_type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Rating = {
        serializedName: "Rating",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PropertiesItem.type.polymorphicDiscriminator,
            uberParent: "PropertiesItem",
            className: "Rating",
            modelProperties: __assign(__assign({}, PropertiesItem.type.modelProperties), { ratingValue: {
                    required: true,
                    serializedName: "ratingValue",
                    type: {
                        name: "Number"
                    }
                }, bestRating: {
                    readOnly: true,
                    serializedName: "bestRating",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var AggregateRating = {
        serializedName: "AggregateRating",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PropertiesItem.type.polymorphicDiscriminator,
            uberParent: "PropertiesItem",
            className: "AggregateRating",
            modelProperties: __assign(__assign({}, Rating.type.modelProperties), { reviewCount: {
                    readOnly: true,
                    serializedName: "reviewCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var Offer = {
        serializedName: "Offer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Offer",
            modelProperties: __assign(__assign({}, Thing.type.modelProperties), { seller: {
                    readOnly: true,
                    serializedName: "seller",
                    type: {
                        name: "Composite",
                        className: "Organization"
                    }
                }, price: {
                    readOnly: true,
                    serializedName: "price",
                    type: {
                        name: "Number"
                    }
                }, priceCurrency: {
                    readOnly: true,
                    serializedName: "priceCurrency",
                    defaultValue: 'USD',
                    type: {
                        name: "String"
                    }
                }, availability: {
                    readOnly: true,
                    serializedName: "availability",
                    type: {
                        name: "String"
                    }
                }, aggregateRating: {
                    readOnly: true,
                    serializedName: "aggregateRating",
                    type: {
                        name: "Composite",
                        className: "AggregateRating"
                    }
                }, lastUpdated: {
                    readOnly: true,
                    serializedName: "lastUpdated",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AggregateOffer = {
        serializedName: "AggregateOffer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "AggregateOffer",
            modelProperties: __assign(__assign({}, Offer.type.modelProperties), { offers: {
                    readOnly: true,
                    serializedName: "offers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Offer"
                            }
                        }
                    }
                } })
        }
    };
    var ImagesImageMetadata = {
        serializedName: "Images/ImageMetadata",
        type: {
            name: "Composite",
            className: "ImagesImageMetadata",
            modelProperties: {
                shoppingSourcesCount: {
                    readOnly: true,
                    serializedName: "shoppingSourcesCount",
                    type: {
                        name: "Number"
                    }
                },
                recipeSourcesCount: {
                    readOnly: true,
                    serializedName: "recipeSourcesCount",
                    type: {
                        name: "Number"
                    }
                },
                aggregateOffer: {
                    readOnly: true,
                    serializedName: "aggregateOffer",
                    type: {
                        name: "Composite",
                        className: "AggregateOffer"
                    }
                }
            }
        }
    };
    var MediaObject = {
        serializedName: "MediaObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "MediaObject",
            modelProperties: __assign(__assign({}, CreativeWork.type.modelProperties), { contentUrl: {
                    readOnly: true,
                    serializedName: "contentUrl",
                    type: {
                        name: "String"
                    }
                }, hostPageUrl: {
                    readOnly: true,
                    serializedName: "hostPageUrl",
                    type: {
                        name: "String"
                    }
                }, contentSize: {
                    readOnly: true,
                    serializedName: "contentSize",
                    type: {
                        name: "String"
                    }
                }, encodingFormat: {
                    readOnly: true,
                    serializedName: "encodingFormat",
                    type: {
                        name: "String"
                    }
                }, hostPageDisplayUrl: {
                    readOnly: true,
                    serializedName: "hostPageDisplayUrl",
                    type: {
                        name: "String"
                    }
                }, width: {
                    readOnly: true,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                }, height: {
                    readOnly: true,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ImageObject = {
        serializedName: "ImageObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ImageObject",
            modelProperties: __assign(__assign({}, MediaObject.type.modelProperties), { thumbnail: {
                    readOnly: true,
                    serializedName: "thumbnail",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                }, imageInsightsToken: {
                    readOnly: true,
                    serializedName: "imageInsightsToken",
                    type: {
                        name: "String"
                    }
                }, insightsMetadata: {
                    readOnly: true,
                    serializedName: "insightsMetadata",
                    type: {
                        name: "Composite",
                        className: "ImagesImageMetadata"
                    }
                }, imageId: {
                    readOnly: true,
                    serializedName: "imageId",
                    type: {
                        name: "String"
                    }
                }, accentColor: {
                    readOnly: true,
                    serializedName: "accentColor",
                    type: {
                        name: "String"
                    }
                }, visualWords: {
                    readOnly: true,
                    serializedName: "visualWords",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ImageKnowledge = {
        serializedName: "ImageKnowledge",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ImageKnowledge",
            modelProperties: __assign(__assign({}, Response.type.modelProperties), { tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageTag"
                            }
                        }
                    }
                }, image: {
                    readOnly: true,
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                } })
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    defaultValue: 'None',
                    type: {
                        name: "String"
                    }
                },
                subCode: {
                    readOnly: true,
                    serializedName: "subCode",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                moreDetails: {
                    readOnly: true,
                    serializedName: "moreDetails",
                    type: {
                        name: "String"
                    }
                },
                parameter: {
                    readOnly: true,
                    serializedName: "parameter",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ErrorResponse",
            modelProperties: __assign(__assign({}, Response.type.modelProperties), { errors: {
                    required: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorModel"
                            }
                        }
                    }
                } })
        }
    };
    var Person = {
        serializedName: "Person",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Person",
            modelProperties: __assign(__assign({}, Thing.type.modelProperties), { jobTitle: {
                    readOnly: true,
                    serializedName: "jobTitle",
                    type: {
                        name: "String"
                    }
                }, twitterProfile: {
                    readOnly: true,
                    serializedName: "twitterProfile",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ImageEntityAction = {
        serializedName: "ImageEntityAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ImageEntityAction",
            modelProperties: __assign({}, ImageAction.type.modelProperties)
        }
    };
    var ImagesModule = {
        serializedName: "ImagesModule",
        type: {
            name: "Composite",
            className: "ImagesModule",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageObject"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageModuleAction = {
        serializedName: "ImageModuleAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ImageModuleAction",
            modelProperties: __assign(__assign({}, ImageAction.type.modelProperties), { data: {
                    readOnly: true,
                    serializedName: "data",
                    type: {
                        name: "Composite",
                        className: "ImagesModule"
                    }
                } })
        }
    };
    var Recipe = {
        serializedName: "Recipe",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Recipe",
            modelProperties: __assign(__assign({}, CreativeWork.type.modelProperties), { cookTime: {
                    readOnly: true,
                    serializedName: "cookTime",
                    type: {
                        name: "String"
                    }
                }, prepTime: {
                    readOnly: true,
                    serializedName: "prepTime",
                    type: {
                        name: "String"
                    }
                }, totalTime: {
                    readOnly: true,
                    serializedName: "totalTime",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecipesModule = {
        serializedName: "RecipesModule",
        type: {
            name: "Composite",
            className: "RecipesModule",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Recipe"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageRecipesAction = {
        serializedName: "ImageRecipesAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ImageRecipesAction",
            modelProperties: __assign(__assign({}, ImageAction.type.modelProperties), { data: {
                    readOnly: true,
                    serializedName: "data",
                    type: {
                        name: "Composite",
                        className: "RecipesModule"
                    }
                } })
        }
    };
    var Query = {
        serializedName: "Query",
        type: {
            name: "Composite",
            className: "Query",
            modelProperties: {
                text: {
                    required: true,
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                displayText: {
                    readOnly: true,
                    serializedName: "displayText",
                    type: {
                        name: "String"
                    }
                },
                webSearchUrl: {
                    readOnly: true,
                    serializedName: "webSearchUrl",
                    type: {
                        name: "String"
                    }
                },
                searchLink: {
                    readOnly: true,
                    serializedName: "searchLink",
                    type: {
                        name: "String"
                    }
                },
                thumbnail: {
                    readOnly: true,
                    serializedName: "thumbnail",
                    type: {
                        name: "Composite",
                        className: "ImageObject"
                    }
                }
            }
        }
    };
    var RelatedSearchesModule = {
        serializedName: "RelatedSearchesModule",
        type: {
            name: "Composite",
            className: "RelatedSearchesModule",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Query"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageRelatedSearchesAction = {
        serializedName: "ImageRelatedSearchesAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ImageRelatedSearchesAction",
            modelProperties: __assign(__assign({}, ImageAction.type.modelProperties), { data: {
                    readOnly: true,
                    serializedName: "data",
                    type: {
                        name: "Composite",
                        className: "RelatedSearchesModule"
                    }
                } })
        }
    };
    var ImageShoppingSourcesAction = {
        serializedName: "ImageShoppingSourcesAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ImageShoppingSourcesAction",
            modelProperties: __assign(__assign({}, ImageAction.type.modelProperties), { data: {
                    readOnly: true,
                    serializedName: "data",
                    type: {
                        name: "Composite",
                        className: "AggregateOffer"
                    }
                } })
        }
    };
    var CropArea = {
        serializedName: "CropArea",
        type: {
            name: "Composite",
            className: "CropArea",
            modelProperties: {
                top: {
                    required: true,
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                },
                bottom: {
                    required: true,
                    serializedName: "bottom",
                    type: {
                        name: "Number"
                    }
                },
                left: {
                    required: true,
                    serializedName: "left",
                    type: {
                        name: "Number"
                    }
                },
                right: {
                    required: true,
                    serializedName: "right",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ImageInfo = {
        serializedName: "ImageInfo",
        type: {
            name: "Composite",
            className: "ImageInfo",
            modelProperties: {
                imageInsightsToken: {
                    serializedName: "imageInsightsToken",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                cropArea: {
                    serializedName: "cropArea",
                    type: {
                        name: "Composite",
                        className: "CropArea"
                    }
                }
            }
        }
    };
    var Filters = {
        serializedName: "Filters",
        type: {
            name: "Composite",
            className: "Filters",
            modelProperties: {
                site: {
                    serializedName: "site",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KnowledgeRequest = {
        serializedName: "KnowledgeRequest",
        type: {
            name: "Composite",
            className: "KnowledgeRequest",
            modelProperties: {
                filters: {
                    serializedName: "filters",
                    type: {
                        name: "Composite",
                        className: "Filters"
                    }
                }
            }
        }
    };
    var VisualSearchRequest = {
        serializedName: "VisualSearchRequest",
        type: {
            name: "Composite",
            className: "VisualSearchRequest",
            modelProperties: {
                imageInfo: {
                    serializedName: "imageInfo",
                    type: {
                        name: "Composite",
                        className: "ImageInfo"
                    }
                },
                knowledgeRequest: {
                    serializedName: "knowledgeRequest",
                    type: {
                        name: "Composite",
                        className: "KnowledgeRequest"
                    }
                }
            }
        }
    };
    var discriminators = {
        'ResponseBase.Point2D': Point2D,
        'ResponseBase.NormalizedQuadrilateral': NormalizedQuadrilateral,
        'ResponseBase.ImageAction': ImageAction,
        'ResponseBase.ImageTag': ImageTag,
        'ResponseBase.Organization': Organization,
        'PropertiesItem.AggregateRating': AggregateRating,
        'ResponseBase.Offer': Offer,
        'ResponseBase.AggregateOffer': AggregateOffer,
        'ResponseBase.ImageObject': ImageObject,
        'ResponseBase.ImageKnowledge': ImageKnowledge,
        'ResponseBase.Response': Response,
        'ResponseBase.Identifiable': Identifiable,
        'ResponseBase.ErrorResponse': ErrorResponse,
        'ResponseBase.Thing': Thing,
        'ResponseBase.Action': Action,
        'ResponseBase.MediaObject': MediaObject,
        'ResponseBase': ResponseBase,
        'ResponseBase.CreativeWork': CreativeWork,
        'ResponseBase.Person': Person,
        'ResponseBase.Intangible': Intangible,
        'ResponseBase.ImageEntityAction': ImageEntityAction,
        'ResponseBase.ImageModuleAction': ImageModuleAction,
        'ResponseBase.Recipe': Recipe,
        'ResponseBase.ImageRecipesAction': ImageRecipesAction,
        'ResponseBase.ImageRelatedSearchesAction': ImageRelatedSearchesAction,
        'ResponseBase.ImageShoppingSourcesAction': ImageShoppingSourcesAction,
        'ResponseBase.StructuredValue': StructuredValue,
        'Properties/Item': PropertiesItem,
        'PropertiesItem.Rating': Rating
    };

    var mappers = /*#__PURE__*/Object.freeze({
        ResponseBase: ResponseBase,
        Identifiable: Identifiable,
        Response: Response,
        Thing: Thing,
        Intangible: Intangible,
        StructuredValue: StructuredValue,
        Point2D: Point2D,
        NormalizedQuadrilateral: NormalizedQuadrilateral,
        ImageTagRegion: ImageTagRegion,
        CreativeWork: CreativeWork,
        Action: Action,
        ImageAction: ImageAction,
        ImageTag: ImageTag,
        Organization: Organization,
        PropertiesItem: PropertiesItem,
        Rating: Rating,
        AggregateRating: AggregateRating,
        Offer: Offer,
        AggregateOffer: AggregateOffer,
        ImagesImageMetadata: ImagesImageMetadata,
        MediaObject: MediaObject,
        ImageObject: ImageObject,
        ImageKnowledge: ImageKnowledge,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        Person: Person,
        ImageEntityAction: ImageEntityAction,
        ImagesModule: ImagesModule,
        ImageModuleAction: ImageModuleAction,
        Recipe: Recipe,
        RecipesModule: RecipesModule,
        ImageRecipesAction: ImageRecipesAction,
        Query: Query,
        RelatedSearchesModule: RelatedSearchesModule,
        ImageRelatedSearchesAction: ImageRelatedSearchesAction,
        ImageShoppingSourcesAction: ImageShoppingSourcesAction,
        CropArea: CropArea,
        ImageInfo: ImageInfo,
        Filters: Filters,
        KnowledgeRequest: KnowledgeRequest,
        VisualSearchRequest: VisualSearchRequest,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Action: Action,
        AggregateOffer: AggregateOffer,
        AggregateRating: AggregateRating,
        CreativeWork: CreativeWork,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        Identifiable: Identifiable,
        ImageAction: ImageAction,
        ImageEntityAction: ImageEntityAction,
        ImageKnowledge: ImageKnowledge,
        ImageModuleAction: ImageModuleAction,
        ImageObject: ImageObject,
        ImageRecipesAction: ImageRecipesAction,
        ImageRelatedSearchesAction: ImageRelatedSearchesAction,
        ImageShoppingSourcesAction: ImageShoppingSourcesAction,
        ImagesImageMetadata: ImagesImageMetadata,
        ImagesModule: ImagesModule,
        ImageTag: ImageTag,
        ImageTagRegion: ImageTagRegion,
        Intangible: Intangible,
        MediaObject: MediaObject,
        NormalizedQuadrilateral: NormalizedQuadrilateral,
        Offer: Offer,
        Organization: Organization,
        Person: Person,
        Point2D: Point2D,
        PropertiesItem: PropertiesItem,
        Query: Query,
        Rating: Rating,
        Recipe: Recipe,
        RecipesModule: RecipesModule,
        RelatedSearchesModule: RelatedSearchesModule,
        Response: Response,
        ResponseBase: ResponseBase,
        StructuredValue: StructuredValue,
        Thing: Thing
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: [
            "options",
            "acceptLanguage"
        ],
        mapper: {
            serializedName: "Accept-Language",
            type: {
                name: "String"
            }
        }
    };
    var clientId = {
        parameterPath: [
            "options",
            "clientId"
        ],
        mapper: {
            serializedName: "X-MSEdge-ClientID",
            type: {
                name: "String"
            }
        }
    };
    var clientIp = {
        parameterPath: [
            "options",
            "clientIp"
        ],
        mapper: {
            serializedName: "X-MSEdge-ClientIP",
            type: {
                name: "String"
            }
        }
    };
    var contentType = {
        parameterPath: [
            "options",
            "contentType"
        ],
        mapper: {
            serializedName: "Content-Type",
            type: {
                name: "String"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: 'https://api.cognitive.microsoft.com',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var image = {
        parameterPath: [
            "options",
            "image"
        ],
        mapper: {
            serializedName: "image",
            type: {
                name: "Stream"
            }
        }
    };
    var knowledgeRequest = {
        parameterPath: [
            "options",
            "knowledgeRequest"
        ],
        mapper: {
            serializedName: "knowledgeRequest",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: [
            "options",
            "location"
        ],
        mapper: {
            serializedName: "X-Search-Location",
            type: {
                name: "String"
            }
        }
    };
    var market = {
        parameterPath: [
            "options",
            "market"
        ],
        mapper: {
            serializedName: "mkt",
            type: {
                name: "String"
            }
        }
    };
    var safeSearch = {
        parameterPath: [
            "options",
            "safeSearch"
        ],
        mapper: {
            serializedName: "safeSearch",
            type: {
                name: "String"
            }
        }
    };
    var setLang = {
        parameterPath: [
            "options",
            "setLang"
        ],
        mapper: {
            serializedName: "setLang",
            type: {
                name: "String"
            }
        }
    };
    var userAgent = {
        parameterPath: [
            "options",
            "userAgent"
        ],
        mapper: {
            serializedName: "User-Agent",
            type: {
                name: "String"
            }
        }
    };
    var xBingApisSDK = {
        parameterPath: "xBingApisSDK",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "X-BingApis-SDK",
            defaultValue: 'true',
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Images. */
    var Images = /** @class */ (function () {
        /**
         * Create a Images.
         * @param {VisualSearchClientContext} client Reference to the service client.
         */
        function Images(client) {
            this.client = client;
        }
        Images.prototype.visualSearch = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, visualSearchOperationSpec, callback);
        };
        return Images;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var visualSearchOperationSpec = {
        httpMethod: "POST",
        path: "images/visualsearch",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            market,
            safeSearch,
            setLang
        ],
        headerParameters: [
            xBingApisSDK,
            acceptLanguage,
            contentType,
            userAgent,
            clientId,
            clientIp,
            location
        ],
        formDataParameters: [
            knowledgeRequest,
            image
        ],
        contentType: "multipart/form-data",
        responses: {
            200: {
                bodyMapper: ImageKnowledge
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-visualsearch";
    var packageVersion = "3.0.0";
    var VisualSearchClientContext = /** @class */ (function (_super) {
        __extends(VisualSearchClientContext, _super);
        /**
         * Initializes a new instance of the VisualSearchClientContext class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function VisualSearchClientContext(credentials, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error("'credentials' cannot be null.");
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRest.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.endpoint = 'https://api.cognitive.microsoft.com';
            _this.baseUri = "{Endpoint}/bing/v7.0";
            _this.requestContentType = "multipart/form-data";
            _this.credentials = credentials;
            if (options.endpoint !== null && options.endpoint !== undefined) {
                _this.endpoint = options.endpoint;
            }
            return _this;
        }
        return VisualSearchClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var VisualSearchClient = /** @class */ (function (_super) {
        __extends(VisualSearchClient, _super);
        /**
         * Initializes a new instance of the VisualSearchClient class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function VisualSearchClient(credentials, options) {
            var _this = _super.call(this, credentials, options) || this;
            _this.images = new Images(_this);
            return _this;
        }
        return VisualSearchClient;
    }(VisualSearchClientContext));

    exports.Images = Images;
    exports.VisualSearchClient = VisualSearchClient;
    exports.VisualSearchClientContext = VisualSearchClientContext;
    exports.VisualSearchMappers = mappers;
    exports.VisualSearchModels = index;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=cognitiveservices-visualsearch.js.map
